log-analysis-app/
â”œâ”€â”€ service-receiver/                 # Service 1: Message Receiver (SQS Consumer)
â”‚   â”œâ”€â”€ app/
â”‚   â”‚   â”œâ”€â”€ main.py                   # Main entry point (polls SQS)
â”‚   â”‚   â”œâ”€â”€ sqs_handler.py            # Polls FIFO SQS Queue
â”‚   â”‚   â”œâ”€â”€ send_to_extractor.py      # Forwards message to the Extractor Service
â”‚   â”‚   â””â”€â”€ requirements.txt          # Python dependencies
â”‚   â”œâ”€â”€ Dockerfile                    # Dockerfile for the Receiver Service
â”‚   â””â”€â”€ tests/                        # Unit tests for the service
â”‚
â”œâ”€â”€ service-log-extractor/            # Service 2: Log Extractor (File Processing)
â”‚   â”œâ”€â”€ app/
â”‚   â”‚   â”œâ”€â”€ main.py                   # Main entry point (Receives HTTP requests)
â”‚   â”‚   â”œâ”€â”€ s3_handler.py             # Fetches the log from S3
â”‚   â”‚   â”œâ”€â”€ log_parser.py             # Scans logs using regex
â”‚   â”‚   â”œâ”€â”€ send_to_storage.py        # Sends error summary to Result Storage Service
â”‚   â”‚   â””â”€â”€ requirements.txt          
â”‚   â”œâ”€â”€ Dockerfile                    
â”‚   â””â”€â”€ tests/                        
â”‚
â”œâ”€â”€ service-result-storage/           # Service 3: Result Storage (DynamoDB Writer)
â”‚   â”œâ”€â”€ app/
â”‚   â”‚   â”œâ”€â”€ main.py                   # Main entry point (Receives HTTP requests)
â”‚   â”‚   â”œâ”€â”€ dynamodb_handler.py       # Stores error summary in DynamoDB
â”‚   â”‚   â”œâ”€â”€ ses_handler.py            # (Optional) Sends notifications via SES
â”‚   â”‚   â””â”€â”€ requirements.txt
â”‚   â”œâ”€â”€ Dockerfile                    
â”‚   â””â”€â”€ tests/                        
â”‚
â”œâ”€â”€ terraform/                        # Terraform IaC for AWS Setup
â”‚   â”œâ”€â”€ eks.tf                        # EKS Cluster
â”‚   â”œâ”€â”€ s3.tf                         # S3 Bucket for file storage
â”‚   â”œâ”€â”€ sqs.tf                        # SQS FIFO Queue
â”‚   â”œâ”€â”€ dynamodb.tf                   # DynamoDB Table
â”‚   â”œâ”€â”€ lambda.tf                     # Lambda Function for S3 Trigger
â”‚   â”œâ”€â”€ iam.tf                        # IAM Roles and Policies
â”‚   â””â”€â”€ variables.tf                  # Variables for better management
â”‚
â”œâ”€â”€ helm/                             # Helm Charts for Kubernetes Deployment (Optional)
â”‚   â”œâ”€â”€ charts/
â”‚   â”‚   â”œâ”€â”€ service-receiver/         # Helm chart for Receiver Service
â”‚   â”‚   â”œâ”€â”€ service-log-extractor/    # Helm chart for Extractor Service
â”‚   â”‚   â””â”€â”€ service-result-storage/   # Helm chart for Storage Service
â”‚   â””â”€â”€ values.yaml                   # Helm configuration file
â”‚
â”œâ”€â”€ .gitignore                        # Ignore unnecessary files
â”œâ”€â”€ README.md                        # Project documentation



âœ… Key Components Explained:
1. service-receiver/ (SQS Consumer)

    Main Function: Polls SQS and forwards messages to the Log Extractor Service.
    Key Files:
        sqs_handler.py: Listens to FIFO SQS Queue.
        send_to_extractor.py: Forwards messages via internal HTTP.

2. service-log-extractor/ (Log Processor)

    Main Function: Receives the message and processes the log file for errors.
    Key Files:
        s3_handler.py: Fetches log data from S3.
        log_parser.py: Scans logs using Python Regex.
        send_to_storage.py: Sends the error summary to the Result Storage Service.

3. service-result-storage/ (DynamoDB Writer)

    Main Function: Receives the error summary and writes it to DynamoDB.
    Key Files:
        dynamodb_handler.py: Writes the error summary to DynamoDB.
        ses_handler.py: (Optional) Sends an SES email notification.

4. terraform/ (AWS Infrastructure as Code)

    Automates the creation of:
        EKS Cluster (eks.tf)
        S3 Bucket (s3.tf)
        SQS FIFO Queue (sqs.tf)
        DynamoDB Table (dynamodb.tf)
        IAM Roles and Permissions (iam.tf)



ðŸ“¦ Service 1: Message Receiver Service (SQS Consumer)
ðŸŽ¯ Goal: Poll the SQS FIFO Queue, extract the message, and forward it to the Log Extractor Service.
What to Learn (Topics + Hands-On Tasks):

    Python Basics (If Needed)
        Variables, loops, functions, error handling (try-except).
        Task: Write a basic Python script with error handling.

    Python Flask for Microservices (REST APIs)
        What: Flask for handling HTTP requests between services.
        Hands-On Task: Create a Flask app that receives a POST request.

    AWS Boto3 for SQS Integration
        What: How to use boto3 for:
            receive_message() â†’ Polling FIFO SQS.
            delete_message() â†’ Deleting processed messages.
        Hands-On Task: Create a Python script that polls SQS and prints message content.

    Dockerizing the SQS Service
        What: Learn to write a Dockerfile for the service.
        Hands-On Task: Containerize the SQS Service and run it with docker run.

âœ… Key Skills Needed:

    Python (boto3, Flask)
    SQS Basics (FIFO Queues)
    Docker Basics (Containerize a Flask app)

ðŸ“¦ Service 2: Log Extractor Service (Log Processing)
ðŸŽ¯ Goal: Receive the S3 file path from Service 1, download the log file from S3, extract error messages using Regex, and forward results to Service 3.
What to Learn (Topics + Hands-On Tasks):

    Python Boto3 for S3 Integration
        What: Learn how to:
            download_file() from S3.
            get_object() for reading file contents without downloading.
        Hands-On Task: Write a Python script to download a file from S3 and print the contents.

    Python Regex (Error Extraction)
        What: Use the re module for pattern matching.
        Hands-On Task: Write a Python script to detect errors like "ERROR" and "Exception" in a text file.

    Inter-Service Communication (Flask POST Requests)
        What: Learn how to send data between services using HTTP POST requests.
        Hands-On Task: Send processed error data from Service 2 to Service 3 using requests.post().

    Dockerizing the Log Extractor Service
        Hands-On Task: Write a Dockerfile for the Log Extractor Service and test it.

âœ… Key Skills Needed:

    Python (boto3, re for regex, Flask)
    S3 Integration
    File Handling and Regex Matching
    Docker Basics

ðŸ“¦ Service 3: Result Storage Service (DynamoDB Writer)
ðŸŽ¯ Goal: Receive the error summary from Service 2 and store it in DynamoDB.
What to Learn (Topics + Hands-On Tasks):

    Python Boto3 for DynamoDB Integration
        What: Learn how to:
            put_item() for storing data.
            get_item() for fetching results.
        Hands-On Task: Write a Python script that writes data to DynamoDB.

    Error Handling and Validation
        What: Validate incoming data before writing it to DynamoDB.
        Hands-On Task: Create a Python function that validates input data before writing to DynamoDB.

    (Optional) SES for Email Notifications
        What: Learn how to send an email using SES.
        Hands-On Task: Send a test email after saving data to DynamoDB.

    Dockerizing the Result Storage Service
        Hands-On Task: Write a Dockerfile and run the container.